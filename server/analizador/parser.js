/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,19],$V2=[1,21],$V3=[1,20],$V4=[1,18],$V5=[1,15],$V6=[1,22],$V7=[1,16],$V8=[1,17],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[2,5,18,24,25,28,29,30,32,34,38,56,57,58,59,60],$Vf=[23,25,48],$Vg=[1,66],$Vh=[1,67],$Vi=[1,53],$Vj=[1,54],$Vk=[1,55],$Vl=[1,56],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[1,77],$Vw=[2,5,18,19,24,25,28,29,30,32,34,38,56,57,58,59,60,62,63,64,65,66,67,68,83,84,85,86,87,88],$Vx=[23,46],$Vy=[2,45],$Vz=[1,105],$VA=[1,106],$VB=[1,99],$VC=[1,91],$VD=[1,92],$VE=[1,93],$VF=[1,94],$VG=[1,95],$VH=[1,96],$VI=[1,97],$VJ=[1,98],$VK=[1,100],$VL=[1,101],$VM=[1,102],$VN=[1,103],$VO=[1,104],$VP=[16,23,26,27,35,46,49,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82],$VQ=[19,25,62,63,64,65,66,67,68,83,84,85,86,87,88],$VR=[45,46],$VS=[1,142],$VT=[16,23,26,27,35,46,49,79,80,81,82],$VU=[16,23,26,27,35,46,49,69,70,71,72,73,74,79,80,81,82],$VV=[16,23,26,27,35,46,49,62,69,70,71,72,73,74,77,79,80,81,82],$VW=[1,214],$VX=[1,209],$VY=[1,210],$VZ=[1,211],$V_=[1,212],$V$=[1,213],$V01=[1,235],$V11=[46,49];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"listainstr":4,"EOF":5,"instruccion":6,"variable":7,"metodos":8,"print":9,"instrif":10,"intrWhile":11,"yey_for":12,"inst_DoWhile":13,"exp_InDec":14,"run_exe":15,"puntoycoma":16,"abrirLLAVE":17,"FORFOR":18,"abrirPar":19,"ml_for":20,"expresion":21,"ml_actualizacion":22,"cerrarPar":23,"cerrarLLAVE":24,"PALABRA_I":25,"MASmas":26,"MENOSmenos":27,"DO":28,"WHILE":29,"VOID":30,"lista_int":31,"EXECUTE":32,"llamarMoF":33,"COUT":34,"CorImp":35,"tipos_print":36,"endl":37,"IF":38,"siguiente_if":39,"ELSE":40,"prod_if_esle":41,"ultimo_else":42,"tipos":43,"t_declaracion":44,"IGUAL":45,"coma":46,"lista_var":47,"abrirCor":48,"cerrarCor":49,"arreglo":50,"dosCor":51,"doble_arreglo":52,"new":53,"LISTA_ELEMENTOS":54,"VCHAR":55,"dobTipo":56,"intTipo":57,"charTipo":58,"boolTipo":59,"stringTipo":60,"DATOS":61,"MENOS":62,"exclamacion":63,"CADENA":64,"CHAR":65,"BOOLEAN":66,"DOUBLE":67,"INT":68,"mayorIgual":69,"mayorQue":70,"menorIgual":71,"menorQue":72,"diferente":73,"dosIgual":74,"modulo":75,"DIVIDIR":76,"MAS":77,"POR":78,"oSigno":79,"And":80,"interrogracion":81,"dosPuntos":82,"TOLOWER":83,"TOUPPER":84,"ROUND":85,"TOSTRING":86,"TYPEOF":87,"potencia":88,"parentesis_exp":89,"palabras":90,"amb_palabras":91,"FLENGTH":92,"vect_2d":93,"lista_par":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"puntoycoma",17:"abrirLLAVE",18:"FORFOR",19:"abrirPar",23:"cerrarPar",24:"cerrarLLAVE",25:"PALABRA_I",26:"MASmas",27:"MENOSmenos",28:"DO",29:"WHILE",30:"VOID",32:"EXECUTE",34:"COUT",35:"CorImp",37:"endl",38:"IF",40:"ELSE",45:"IGUAL",46:"coma",48:"abrirCor",49:"cerrarCor",51:"dosCor",53:"new",55:"VCHAR",56:"dobTipo",57:"intTipo",58:"charTipo",59:"boolTipo",60:"stringTipo",62:"MENOS",63:"exclamacion",64:"CADENA",65:"CHAR",66:"BOOLEAN",67:"DOUBLE",68:"INT",69:"mayorIgual",70:"mayorQue",71:"menorIgual",72:"menorQue",73:"diferente",74:"dosIgual",75:"modulo",76:"DIVIDIR",77:"MAS",78:"POR",79:"oSigno",80:"And",81:"interrogracion",82:"dosPuntos",83:"TOLOWER",84:"TOUPPER",85:"ROUND",86:"TOSTRING",87:"TYPEOF",88:"potencia",92:"FLENGTH"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[12,10],[20,1],[20,2],[22,2],[22,2],[13,9],[11,7],[8,8],[15,4],[9,4],[36,1],[36,3],[10,8],[39,2],[39,0],[41,8],[41,3],[42,4],[42,0],[7,3],[44,3],[44,5],[44,1],[44,4],[44,3],[44,6],[47,3],[47,1],[31,4],[31,2],[31,0],[52,9],[52,10],[50,6],[50,4],[50,2],[43,1],[43,1],[43,1],[43,1],[43,1],[54,3],[54,1],[21,2],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,5],[21,2],[21,2],[21,4],[21,4],[21,4],[21,4],[21,4],[21,6],[21,2],[21,2],[89,2],[89,3],[90,4],[90,1],[90,1],[90,0],[91,3],[91,0],[14,3],[14,3],[14,3],[14,8],[33,2],[33,3],[93,3],[93,0],[94,3],[94,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; tablaDeErrores.imprimirTablaE(); tablaDeErrores.clearTablaError(); return this.$;  
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$ = []; this.$.push($$[$0]); 
break;
case 4: case 5: case 7: case 8: case 9: case 10: case 11: case 12:
this.$ = $$[$0];
break;
case 6: case 38: case 39:
 this.$ = $$[$0]; 
break;
case 13: case 14:
this.$ = new Dato($$[$0-1], "ERROR", this._$.first_line  , this._$.first_column); tablaDeErrores.agregarError(new error($$[$0-1], "SINTACTICO", this._$.first_line  , this._$.first_column)); console.error('Error sint√°ctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
break;
case 15:
this.$= new For($$[$0-7],$$[$0-6],$$[$0-4], $$[$0-1], this._$.first_line  , this._$.first_column);
break;
case 16: case 28: case 87:
this.$=$$[$0];
break;
case 17: case 89: case 103:
this.$=$$[$0-1];
break;
case 18: case 19:
this.$ = new inst_IncDec($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 20:
this.$= new do_while($$[$0-2],$$[$0-6],_$[$0-8].first_line, _$[$0-8].first_column);
break;
case 21:
this.$= new While($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 22:
 this.$ = new Metodo($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column);
break;
case 23:
this.$ = new execute($$[$0-2],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 24:
 this.$ = new Print($$[$0-1],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 25:
 this.$ = null;  
break;
case 26:
 this.$ = "salto"; 
break;
case 27:
this.$ = new If($$[$0-5], $$[$0-2], Ielse_if,cond_ifElse,Ielse,cond_else ,_$[$0-7].first_line, _$[$0-7].first_column);  cond_else=null;cond_ifElse=null;Ielse=[];Ielse_if =[]; 
break;
case 29:
 this.$ = null;  Ielse_if=null; Ielse=null;  cond_ifElse=null; cond_else=null
break;
case 30:
cond_ifElse=$$[$0-5]; Ielse_if=$$[$0-2]; this.$=$$[$0-2];
break;
case 31:
Ielse=$$[$0-1]; cond_else="else"; cond_ifElse=null; Ielse_if=null; this.$ = $$[$0-1]; 
break;
case 32:
Ielse=$$[$0-1]; cond_else="else"; this.$ = $$[$0-1]; 
break;
case 33:
 Ielse=null; cond_else=null; this.$ = null;  
break;
case 34:
  
        if ($$[$0] === "revisar") {
            if ($$[$0-2] === "DOUBLE") {
            dob_default = new Dato(0.0, TipoDato.DOUBLE, _$[$0-2].first_line, _$[$0-2].first_column);
            this.$ = new Variable($$[$0-1], $$[$0-2], dob_default, _$[$0-2].first_line, _$[$0-2].first_column);
            } else if ($$[$0-2] === "INT") {
            int_default = new Dato(0, TipoDato.INT, _$[$0-2].first_line, _$[$0-2].first_column);
            this.$ = new Variable($$[$0-1], $$[$0-2], int_default, _$[$0-2].first_line, _$[$0-2].first_column);
            } else if ($$[$0-2] === "CHAR") {
            char_default = new Dato('0', TipoDato.CHAR, _$[$0-2].first_line, _$[$0-2].first_column);    
            this.$ = new Variable($$[$0-1], $$[$0-2], char_default, _$[$0-2].first_line, _$[$0-2].first_column);
            } else if ($$[$0-2] === "BOOL") {
            bool_default = new Dato("true", TipoDato.BOOLEAN, _$[$0-2].first_line, _$[$0-2].first_column);      
            this.$ = new Variable($$[$0-1], $$[$0-2], bool_default, _$[$0-2].first_line, _$[$0-2].first_column);
            } else if ($$[$0-2] === "STD::STRING") {
            str_default = new Dato(" ", TipoDato.CADENA, _$[$0-2].first_line, _$[$0-2].first_column);          
            this.$ = new Variable($$[$0-1], $$[$0-2], str_default, _$[$0-2].first_line, _$[$0-2].first_column);
            } else {
            console.log("error sintactico");
            }
        } 
        else if (arreglo=="1D1" && $$[$0]!= "revisar"){
            this.$ = new Vector($$[$0-1],$$[$0-2],$$[$0-2],"LISTA",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
            arreglo="";
        }
        else if (arreglo=="FUNCION_LISTA" && $$[$0]!= "revisar"){
            this.$ = new Vector($$[$0-1],$$[$0-2],$$[$0-2],"FUNCION_LISTA",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
            arreglo="";
        } 
        else if (arreglo=="1D2" && $$[$0]!="revisar"){
            this.$ = new Vector($$[$0-1],$$[$0-2],tipoArreglo,"DEF",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
            arreglo="";
            tipoArreglo="";
        } 
        else if (arreglo=="matriz1" && $$[$0]!="revisar"){
           this.$ = new Vector2D($$[$0-1],$$[$0-2],tipoArreglo,"DEF",$$[$0],datoDos,_$[$0-2].first_line, _$[$0-2].first_column);
           arreglo="";
            tipoArreglo="";
           datoDos=null;
        }
        else if (arreglo=="matriz2" && $$[$0]!="revisar"){
            this.$ = new Vector2D($$[$0-1],$$[$0-2],$$[$0-2],"LISTA",$$[$0],mat2,_$[$0-2].first_line, _$[$0-2].first_column);
            arreglo="";
            tipoArreglo="";
            mat2=null;
        } else if (arreglo=="FUNCION" && $$[$0]!="revisar") {
            this.$ = new Funcion ($$[$0-2],$$[$0-1],par,$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
            arreglo="";
            par ="";
        }else if (arreglo=="listaDeVar" && $$[$0]!="revisar") {
            varias_variables.push($$[$0-1])
            this.$ = new Varias_var(varias_variables, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            arreglo="";
            varias_variables=[];
        }

        else { 
            if (arreglo == null){
        this.$ = new Variable($$[$0-1], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
        arreglo="";}
        }

        
break;
case 35:
 this.$ = $$[$0-1]; arreglo=null;
break;
case 36:
arreglo="listaDeVar"; varias_variables=$$[$0-3]; this.$ = $$[$0-1]; 
break;
case 37:
 this.$ = "revisar"; 
break;
case 40:
par = $$[$0-4] ; arreglo="FUNCION"; this.$ =$$[$0-1];
break;
case 41:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 42: case 57: case 106:
this.$ = []; this.$.push($$[$0]);
break;
case 43:
this.$ = $$[$0-3]; this.$.push($$[$0-1]); this.$.push($$[$0]);
break;
case 44:
this.$ = []; this.$.push($$[$0-1]); this.$.push($$[$0]);
break;
case 45: case 94: case 104:
this.$=null;
break;
case 46:
 arreglo="matriz1"; tipoArreglo=$$[$0-7]; datoDos=$$[$0-2]; this.$=$$[$0-5]; 
break;
case 47:
arreglo="matriz2"; mat2=$$[$0-3]; this.$ = $$[$0-7]; 
break;
case 48:
arreglo="1D2"; tipoArreglo=$$[$0-4]; this.$=$$[$0-2];
break;
case 49:
 arreglo="1D1";this.$=$$[$0-2];
break;
case 50:
 arreglo="FUNCION_LISTA"; this.$ = new cstr($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 51:
this.$="DOUBLE";
break;
case 52:
this.$="INT";
break;
case 53:
this.$="CHAR";
break;
case 54:
this.$="BOOL";
break;
case 55:
this.$="STD::STRING";
break;
case 56: case 105:
this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 58:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 59:
this.$ = new Not($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 60: case 107:
 this.$ = new Dato($$[$0], TipoDato.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 61: case 108:
 this.$ = new Dato($$[$0], TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 62: case 109:
 this.$ = new Dato($$[$0], TipoDato.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 63: case 110:
 this.$ = new Dato($$[$0], TipoDato.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 64: case 111:
 this.$ = new Dato($$[$0], TipoDato.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 65: case 66: case 67: case 68: case 69: case 70:
this.$ = new Relacionales($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 71: case 72: case 73: case 74: case 75:
this.$ = new Aritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 76: case 77:
this.$ = new Logicos($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 78:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 79: case 80:
this.$ = new IncDec($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 81:
this.$= new lower($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 82:
this.$= new upper($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 83:
this.$= new round($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 84:
this.$= new toString($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 85:
this.$= new TypeOf($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 86:
this.$=new Potencia($$[$0-3],$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 88:

        arreglo ="";

        if(totalDos!=null){
            this.$= new id_arreglo($$[$0-1],$$[$0],totalDos, _$[$0-1].first_line, _$[$0-1].first_column);
            totalDos=null;
            arreglo ="";
            accesoDos=null;
        }
        else if(accesoUno=="unaDim" && totalDos==null){
            this.$= new id_arreglo($$[$0-1],$$[$0],null, _$[$0-1].first_line, _$[$0-1].first_column);
            accesoUno="";
            totalDos=null;
            arreglo ="";
            accesoDos=null;
        } else if ($$[$0] == "LARGO" && totalDos==null && accesoUno==null && accesoDos ==null ){
            this.$ = new Length ($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        }else if ($$[$0] == "vectCHAR" && totalDos==null && accesoUno==null && accesoDos ==null ){
            this.$ = new cstr ($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        }
        else{
        this.$ = new id($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    }
    
break;
case 90:
this.$=new Casteos($$[$0],$$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 91:

        if (accesoDos =="dosDim"){
            this.$=$$[$0-2];
        }else{
            accesoUno="unaDim";
            this.$=$$[$0-2];
            totalDos=null;
        }
    
break;
case 92:
totalDos=null;accesoUno=null; accesoDos =null; this.$="LARGO";
break;
case 93:
totalDos=null;accesoUno=null; accesoDos =null; this.$="vectCHAR";
break;
case 95:
accesoDos="dosDim"; totalDos=$$[$0-1]; this.$=$$[$0-1];
break;
case 96:
accesoDos=null; this.$=null;
break;
case 97: case 98:
this.$ = new inst_IncDec($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 99:
this.$= new run_funcion($$[$0-2],$$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 100:
this.$= new Mod_vector($$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 101:
this.$=null
break;
case 102:
this.$=$$[$0-2];
break;
case 112:
this.$ = new id($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},{1:[3]},{2:$V0,5:[1,28],6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),{16:[1,30],17:[1,31]},{25:[1,32]},{25:[1,33]},{35:[1,34]},{19:[1,35]},{19:[1,36]},{19:[1,37]},{17:[1,38]},{19:[1,41],26:[1,39],27:[1,40],48:[1,42]},{25:[1,43]},o($Vf,[2,51]),o($Vf,[2,52]),o($Vf,[2,53]),o($Vf,[2,54]),o($Vf,[2,55]),{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,13]),o($Ve,[2,14]),{16:[1,47],19:[1,50],44:44,45:[1,45],46:[1,46],48:[1,48],51:[1,49]},{19:[1,51]},{19:$Vg,21:52,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:68,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:69,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{7:71,19:$Vg,20:70,21:72,25:$Vh,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{2:$V0,4:73,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},{16:[1,74]},{16:[1,75]},{19:$Vg,21:79,23:$Vv,25:$Vh,33:76,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,94:78},{19:$Vg,21:80,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:[1,81]},o($Vw,[2,34]),{19:$Vg,21:82,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{25:[1,84],47:83},o($Vw,[2,37]),{49:[1,85]},{45:[1,86]},o($Vx,$Vy,{31:87,43:88,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd}),o($Vx,$Vy,{43:88,31:89,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd}),{16:[1,107],26:$Vz,27:$VA,35:[1,108],36:90,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{19:$Vg,21:109,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:110,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VP,[2,60]),o($VP,[2,61]),o($VP,[2,62]),o($VP,[2,63]),o($VP,[2,64]),{19:[1,111]},{19:[1,112]},{19:[1,113]},{19:[1,114]},{19:[1,115]},{19:[1,116]},{19:$Vg,21:118,25:$Vh,43:119,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:117},o($VP,[2,94],{90:120,48:[1,121],55:[1,123],92:[1,122]}),{23:[1,124],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{23:[1,125],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{19:$Vg,21:126,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VQ,[2,16]),{16:[1,127],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{2:$V0,6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,24:[1,128],25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},o($Ve,[2,97]),o($Ve,[2,98]),o($Ve,[2,99]),{16:[1,129]},{23:[1,130],46:[1,131]},o($Vx,[2,106],{26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),{26:$Vz,27:$VA,49:[1,132],62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{19:$Vg,21:79,23:$Vv,25:$Vh,33:133,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,94:78},{16:[1,134],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{45:[1,135],46:[1,136]},o($VR,[2,42]),{45:[1,137]},{48:[1,140],52:138,53:[1,139]},{23:[1,141],46:$VS},{25:[1,143]},{23:[1,144],46:$VS},o($Ve,[2,24]),{19:$Vg,21:145,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:146,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:147,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:148,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:149,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:150,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:151,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:152,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:153,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:154,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:155,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:156,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:157,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:158,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VP,[2,79]),o($VP,[2,80]),o($Ve,[2,25]),{37:[1,159]},o($VP,[2,58]),o($VT,[2,59],{62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),{19:$Vg,21:160,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:161,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:162,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:163,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{25:[1,164]},{19:$Vg,21:165,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VP,[2,87]),{23:[1,166],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{23:[1,167]},o($VP,[2,88]),{19:$Vg,21:168,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VP,[2,92]),o($VP,[2,93]),{17:[1,169]},{17:[1,170]},{16:[1,171],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($VQ,[2,17]),{29:[1,172]},o($Ve,[2,101]),{16:[1,173]},{19:$Vg,21:174,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{45:[2,104],48:[1,176],93:175},o($Ve,[2,23]),o($Vw,[2,35]),{19:$Vg,21:177,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{25:[1,178]},{25:[1,182],48:[1,181],50:179,53:[1,180]},o($Vw,[2,39]),{43:183,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},{48:[1,184]},{17:[1,185]},{43:186,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},o($Vx,[2,44]),{17:[1,187]},o($VU,[2,65],{62:$VB,75:$VI,76:$VJ,77:$VK,78:$VL}),o($VU,[2,66],{62:$VB,75:$VI,76:$VJ,77:$VK,78:$VL}),o($VU,[2,67],{62:$VB,75:$VI,76:$VJ,77:$VK,78:$VL}),o($VU,[2,68],{62:$VB,75:$VI,76:$VJ,77:$VK,78:$VL}),o($VU,[2,69],{62:$VB,75:$VI,76:$VJ,77:$VK,78:$VL}),o($VU,[2,70],{62:$VB,75:$VI,76:$VJ,77:$VK,78:$VL}),o($VP,[2,71]),o($VP,[2,72]),o($VV,[2,73],{75:$VI,76:$VJ,78:$VL}),o($VV,[2,74],{75:$VI,76:$VJ,78:$VL}),o($VP,[2,75]),o([16,23,26,27,35,46,49,79,81,82],[2,76],{62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,80:$VN}),o($VT,[2,77],{62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),{26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:[1,188]},{16:[1,189]},{23:[1,190],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{23:[1,191],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{23:[1,192],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{23:[1,193],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{23:[1,194]},{26:$Vz,27:$VA,46:[1,195],62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($VP,[2,89]),{19:$Vg,21:196,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{26:$Vz,27:$VA,49:[1,197],62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{2:$V0,4:198,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},{2:$V0,4:199,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},{22:200,25:[1,201]},{19:[1,202]},o($Ve,[2,102]),o($Vx,[2,105],{26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),{45:[1,203]},{19:$Vg,21:204,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{16:[1,205],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($VR,[2,41]),o($Vw,[2,38]),{43:206,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},{25:$VW,54:207,61:208,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$},{55:[1,215]},{48:[1,216]},{25:$VW,54:217,61:208,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$},{2:$V0,4:218,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},{25:[1,219]},{2:$V0,4:220,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},{19:$Vg,21:221,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($Ve,[2,26]),o($VP,[2,81]),o($VP,[2,82]),o($VP,[2,83]),o($VP,[2,84]),o($VP,[2,85]),{19:$Vg,21:222,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VP,[2,90]),o($VP,[2,96],{91:223,48:[1,224]}),{2:$V0,6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,24:[1,225],25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},{2:$V0,6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,24:[1,226],25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},{23:[1,227]},{26:[1,228],27:[1,229]},{19:$Vg,21:230,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vg,21:231,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{26:$Vz,27:$VA,49:[1,232],62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($Vw,[2,36]),{48:[1,233]},{46:$V01,49:[1,234]},o($V11,[2,57]),o($V11,[2,107]),o($V11,[2,108]),o($V11,[2,109]),o($V11,[2,110]),o($V11,[2,111]),o($V11,[2,112]),o($Vw,[2,50]),{19:$Vg,21:236,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{46:$V01,49:[1,237]},{2:$V0,6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,24:[1,238],25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},o($Vx,[2,43]),{2:$V0,6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,24:[1,239],25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},o([16,23,26,27,35,46,49,81,82],[2,78],{62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN}),{23:[1,240],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($VP,[2,91]),{19:$Vg,21:241,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($Ve,[2,29],{39:242,40:[1,243]}),o($Ve,[2,21]),{17:[1,244]},{23:[2,18]},{23:[2,19]},{23:[1,245],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{16:[1,246],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{45:[2,103]},{19:$Vg,21:247,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{16:[1,248]},{25:$VW,61:249,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$},{26:$Vz,27:$VA,49:[1,250],62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{46:[1,251]},o($Vw,[2,40]),o($Ve,[2,22]),o($VP,[2,86]),{26:$Vz,27:$VA,49:[1,252],62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($Ve,[2,27]),{17:[1,255],38:[1,254],41:253},{2:$V0,4:256,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},{16:[1,257]},o($Ve,[2,100]),{26:$Vz,27:$VA,49:[1,258],62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($Vw,[2,49]),o($V11,[2,56]),{48:[1,259]},{48:[1,260]},o($VP,[2,95]),o($Ve,[2,28]),{19:[1,261]},{2:$V0,4:262,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},{2:$V0,6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,24:[1,263],25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},o($Ve,[2,20]),{16:[1,264]},{19:$Vg,21:265,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{25:$VW,54:266,61:208,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$},{19:$Vg,21:267,25:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{2:$V0,6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,24:[1,268],25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},o($Ve,[2,15]),o($Vw,[2,48]),{26:$Vz,27:$VA,49:[1,269],62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},{46:$V01,49:[1,270]},{23:[1,271],26:$Vz,27:$VA,62:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO},o($Ve,[2,31]),{16:[1,272]},{49:[1,273]},{17:[1,274]},o($Vw,[2,46]),{16:[1,275]},{2:$V0,4:276,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},o($Vw,[2,47]),{2:$V0,6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,24:[1,277],25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},o($Ve,[2,33],{42:278,40:[1,279]}),o($Ve,[2,30]),{17:[1,280]},{2:$V0,4:281,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},{2:$V0,6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,18:$V1,24:[1,282],25:$V2,28:$V3,29:$V4,30:$V5,32:$V6,34:$V7,38:$V8,43:14,56:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd},o($Ve,[2,32])],
defaultActions: {28:[2,1],228:[2,18],229:[2,19],232:[2,103]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { TipoDato } = require("../interprete/Expresion.js");
    const Dato = require("../interprete/expresion/Dato.js");
        const id = require("../interprete/expresion/id.js");
    const Ternario = require("../interprete/expresion/ternario.js");
    const Logicos = require("../interprete/expresion/Logicos.js");
    const Not = require("../interprete/expresion/Not.js");
    const Negativo = require("../interprete/expresion/Negativo.js");
    const IncDec = require("../interprete/expresion/IncDec.js");
    const Aritmetica = require("../interprete/expresion/Aritmetica.js");
    const Relacionales = require("../interprete/expresion/Relacionales.js");
    const id_arreglo = require("../interprete/expresion/id_arreglo.js");
    const Potencia = require("../interprete/expresion/Potencia.js");
    const Casteos = require("../interprete/expresion/Casteos.js");
    const lower = require("../interprete/expresion/lower.js");
    const Mod_vector=require("../interprete/expresion/Mod_vector.js");
    const upper = require("../interprete/expresion/upper.js");
    const round = require("../interprete/expresion/round.js");
    const TypeOf = require("../interprete/expresion/TypeOf.js");
    const toString = require("../interprete/expresion/toString.js");
    const Length = require("../interprete/expresion/Length.js");
    const cstr = require("../interprete/expresion/cstr.js");

    const Print = require("../interprete/instruccion/Print.js");
    const If = require("../interprete/instruccion/If.js");
    const Variable = require("../interprete/instruccion/Variable.js");
const inst_IncDec = require("../interprete/instruccion/inst_IncDec.js");
    const Vector = require("../interprete/instruccion/Vector.js");
   const Vector2D = require("../interprete/instruccion/Vector2D.js");
   const Funcion = require("../interprete/instruccion/Funcion.js");
      const run_funcion = require("../interprete/instruccion/run_funcion.js");
    const Varias_var = require("../interprete/instruccion/Varias_var.js");
    const Metodo = require("../interprete/instruccion/Metodo.js");
    const execute = require("../interprete/instruccion/execute.js");
    const While = require("../interprete/instruccion/While.js");
    const do_while = require("../interprete/instruccion/do_while.js");
    const For = require("../interprete/instruccion/For.js");

    const tablaError = require('../interprete/Errores/tablaError.js');
    const error = require('../interprete/Errores/error.js');
    const tablaDeErrores = new tablaError();
    let par =[];
    let arreglo = "";
    let varias_variables = [];

    let tipoArreglo = "";
    let accesoUno = "";
    let accesoDos = "";
    let totalDos = null;
    let datoDos = null;
    let mat2=null;

    //if
    let Ielse_if =[];
    let Ielse=[];
    let cond_ifElse=null;
    let cond_else=null;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* se ignoran */
break;
case 1:/* se ignoran */
break;
case 2:return "FORFOR";
break;
case 3:return  "puntoycoma"; 
break;
case 4:return "COUT";
break;
case 5:return "TOSTRING";
break;
case 6:return "EXECUTE";
break;
case 7:return "TOLOWER";
break;
case 8:return "TOUPPER";
break;
case 9:return "DO";
break;
case 10:return "ROUND";
break;
case 11:return "FLENGTH";
break;
case 12:return "VCHAR";
break;
case 13:return "TYPEOF";
break;
case 14:return "WHILE";
break;
case 15:return "VOID";
break;
case 16:return "endl";
break;
case 17:return "IF";
break;
case 18:return "ELSE";
break;
case 19:return  "CorImp"; 
break;
case 20:return "dosCor";
break;
case 21:return "MASmas";
break;
case 22:return "MENOSmenos";
break;
case 23:return "dosIgual";
break;
case 24:return  "menorIgual"; 
break;
case 25:return  "mayorIgual"; 
break;
case 26:return  "diferente"; 
break;
case 27:return  "And"; 
break;
case 28:return  "oSigno"; 
break;
case 29:return "MAS";
break;
case 30:return "POR";
break;
case 31:return "IGUAL";
break;
case 32:return "DIVIDIR";
break;
case 33:return "MENOS";
break;
case 34:return "potencia";
break;
case 35:return "modulo";
break;
case 36:return "dosPuntos";
break;
case 37:return "new"; 
break;
case 38:return "dobTipo"; 
break;
case 39:return "intTipo"; 
break;
case 40:return "charTipo"; 
break;
case 41:return "boolTipo"; 
break;
case 42:return "stringTipo"; 
break;
case 43:return  "exclamacion"; 
break;
case 44:return "abrirPar"; 
break;
case 45:return  "cerrarPar"; 
break;
case 46:return "abrirLLAVE"; 
break;
case 47:return "cerrarLLAVE"; 
break;
case 48:return  "menorQue"; 
break;
case 49:return  "mayorQue"; 
break;
case 50:return  "interrogracion"; 
break;
case 51:return  "coma"; 
break;
case 52:return  "abrirCor"; 
break;
case 53:return  "cerrarCor"; 
break;
case 54:return 67;
break;
case 55:return 68;
break;
case 56:return 66;
break;
case 57: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 65; 
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 64; 
break;
case 59:return 25;
break;
case 60:/* Espacios se ignoran */
break;
case 61:return 5;
break;
case 62: console.error('Error l√©xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column); 
    tablaDeErrores.agregarError(new error(yy_.yytext, "LEXICO", yy_.yylloc.first_line , yy_.yylloc.first_column));
 
break;
}
},
rules: [/^(?:[\/][\/][^\n]+)/i,/^(?:[[\/][\*][^\*\/]+[\*][\/])/i,/^(?:for\b)/i,/^(?:;)/i,/^(?:cout\b)/i,/^(?:std::toString\b)/i,/^(?:execute\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:do\b)/i,/^(?:round\b)/i,/^(?:\.length\(\))/i,/^(?:\.c_str\(\))/i,/^(?:typeof\b)/i,/^(?:while\b)/i,/^(?:void\b)/i,/^(?:endl\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:<<)/i,/^(?:\[\]\[\])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:=)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?::)/i,/^(?:new\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:std::string\b)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[0-9]+[.][0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:(true|false)\b)/i,/^(?:'[^\']')/i,/^(?:"[^\"]*")/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}