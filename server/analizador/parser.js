/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,12],$V2=[1,15],$V3=[1,16],$V4=[1,13],$V5=[1,14],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[1,21],$Vb=[2,5,14,15,19,20,22,27,45,46,47,48,49],$Vc=[15,17,37],$Vd=[1,52],$Ve=[1,51],$Vf=[1,43],$Vg=[1,44],$Vh=[1,45],$Vi=[1,46],$Vj=[1,47],$Vk=[1,48],$Vl=[1,49],$Vm=[1,50],$Vn=[1,57],$Vo=[1,79],$Vp=[1,71],$Vq=[1,72],$Vr=[1,73],$Vs=[1,74],$Vt=[1,75],$Vu=[1,76],$Vv=[1,77],$Vw=[1,78],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[13,17,23,35,38,51,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],$VF=[17,35],$VG=[34,35],$VH=[13,17,23,35,38,68,69,70,71,72,73],$VI=[1,138],$VJ=[1,133],$VK=[1,134],$VL=[1,135],$VM=[1,136],$VN=[1,137],$VO=[13,17,23,35,38,58,59,60,61,62,63,68,69,70,71,72,73],$VP=[13,17,23,35,38,51,58,59,60,61,62,63,66,68,69,70,71,72,73],$VQ=[35,38],$VR=[1,180];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"listainstr":4,"EOF":5,"instruccion":6,"variable":7,"metodos":8,"print":9,"instrif":10,"exp_InDec":11,"run_exe":12,"puntoycoma":13,"VOID":14,"PALABRA_I":15,"abrirPar":16,"cerrarPar":17,"abrirLLAVE":18,"cerrarLLAVE":19,"EXECUTE":20,"llamarMoF":21,"COUT":22,"CorImp":23,"expresion":24,"tipos_print":25,"endl":26,"IF":27,"siguiente_if":28,"ELSE":29,"prod_if_esle":30,"ultimo_else":31,"tipos":32,"t_declaracion":33,"IGUAL":34,"coma":35,"lista_var":36,"abrirCor":37,"cerrarCor":38,"arreglo":39,"dosCor":40,"doble_arreglo":41,"lista_int":42,"new":43,"LISTA_ELEMENTOS":44,"dobTipo":45,"intTipo":46,"charTipo":47,"boolTipo":48,"stringTipo":49,"DATOS":50,"MENOS":51,"exclamacion":52,"CADENA":53,"CHAR":54,"BOOLEAN":55,"DOUBLE":56,"INT":57,"mayorIgual":58,"mayorQue":59,"menorIgual":60,"menorQue":61,"diferente":62,"dosIgual":63,"modulo":64,"DIVIDIR":65,"MAS":66,"POR":67,"oSigno":68,"And":69,"interrogracion":70,"dosPuntos":71,"MASmas":72,"MENOSmenos":73,"potencia":74,"parentesis_exp":75,"palabras":76,"amb_palabras":77,"vect_2d":78,"lista_par":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"puntoycoma",14:"VOID",15:"PALABRA_I",16:"abrirPar",17:"cerrarPar",18:"abrirLLAVE",19:"cerrarLLAVE",20:"EXECUTE",22:"COUT",23:"CorImp",26:"endl",27:"IF",29:"ELSE",34:"IGUAL",35:"coma",37:"abrirCor",38:"cerrarCor",40:"dosCor",43:"new",45:"dobTipo",46:"intTipo",47:"charTipo",48:"boolTipo",49:"stringTipo",51:"MENOS",52:"exclamacion",53:"CADENA",54:"CHAR",55:"BOOLEAN",56:"DOUBLE",57:"INT",58:"mayorIgual",59:"mayorQue",60:"menorIgual",61:"menorQue",62:"diferente",63:"dosIgual",64:"modulo",65:"DIVIDIR",66:"MAS",67:"POR",68:"oSigno",69:"And",70:"interrogracion",71:"dosPuntos",72:"MASmas",73:"MENOSmenos",74:"potencia"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[8,7],[12,4],[9,4],[25,1],[25,3],[10,8],[28,2],[28,0],[30,8],[30,3],[31,4],[31,0],[7,3],[33,3],[33,5],[33,1],[33,4],[33,3],[33,6],[36,3],[36,1],[42,4],[42,2],[41,9],[41,10],[39,6],[39,4],[32,1],[32,1],[32,1],[32,1],[32,1],[44,3],[44,1],[24,2],[24,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,5],[24,2],[24,2],[24,6],[24,2],[24,2],[75,2],[75,3],[76,4],[76,0],[77,3],[77,0],[11,3],[11,3],[11,3],[11,8],[21,2],[21,3],[78,3],[78,0],[79,3],[79,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; tablaDeErrores.imprimirTablaE(); tablaDeErrores.clearTablaError(); return this.$;  
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$ = []; this.$.push($$[$0]); 
break;
case 4: case 5: case 7: case 8: case 9:
this.$ = $$[$0];
break;
case 6: case 27: case 28:
 this.$ = $$[$0]; 
break;
case 10:
this.$ = new Dato($$[$0-1], "ERROR", this._$.first_line  , this._$.first_column); tablaDeErrores.agregarError(new error($$[$0-1], "SINTACTICO", this._$.first_line  , this._$.first_column)); console.error('Error sint√°ctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
break;
case 11:
 this.$ = new Metodo($$[$0-6],$$[$0-5],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 12:
this.$ = new execute($$[$0-2],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 13:
 this.$ = new Print($$[$0-1],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 14:
 this.$ = null;  
break;
case 15:
 this.$ = "salto"; 
break;
case 16:
this.$ = new If($$[$0-5], $$[$0-2], Ielse_if,cond_ifElse,Ielse,cond_else ,_$[$0-7].first_line, _$[$0-7].first_column);  cond_else=null;cond_ifElse=null;Ielse=[];Ielse_if =[]; 
break;
case 17: case 69:
this.$=$$[$0];
break;
case 18:
 this.$ = null;  Ielse_if=null; Ielse=null;  cond_ifElse=null; cond_else=null
break;
case 19:
cond_ifElse=$$[$0-5]; Ielse_if=$$[$0-2]; this.$=$$[$0-2];
break;
case 20:
Ielse=$$[$0-1]; cond_else="else"; cond_ifElse=null; Ielse_if=null; this.$ = $$[$0-1]; 
break;
case 21:
Ielse=$$[$0-1]; cond_else="else"; this.$ = $$[$0-1]; 
break;
case 22:
 Ielse=null; cond_else=null; this.$ = null;  
break;
case 23:
  
        if ($$[$0] === "revisar") {
            if ($$[$0-2] === "DOUBLE") {
            dob_default = new Dato(0.0, TipoDato.DOUBLE, _$[$0-2].first_line, _$[$0-2].first_column);
            this.$ = new Variable($$[$0-1], $$[$0-2], dob_default, _$[$0-2].first_line, _$[$0-2].first_column);
            } else if ($$[$0-2] === "INT") {
            int_default = new Dato(0, TipoDato.INT, _$[$0-2].first_line, _$[$0-2].first_column);
            this.$ = new Variable($$[$0-1], $$[$0-2], int_default, _$[$0-2].first_line, _$[$0-2].first_column);
            } else if ($$[$0-2] === "CHAR") {
            char_default = new Dato('0', TipoDato.CHAR, _$[$0-2].first_line, _$[$0-2].first_column);    
            this.$ = new Variable($$[$0-1], $$[$0-2], char_default, _$[$0-2].first_line, _$[$0-2].first_column);
            } else if ($$[$0-2] === "BOOL") {
            bool_default = new Dato("true", TipoDato.BOOLEAN, _$[$0-2].first_line, _$[$0-2].first_column);      
            this.$ = new Variable($$[$0-1], $$[$0-2], bool_default, _$[$0-2].first_line, _$[$0-2].first_column);
            } else if ($$[$0-2] === "STD::STRING") {
            str_default = new Dato(" ", TipoDato.CADENA, _$[$0-2].first_line, _$[$0-2].first_column);          
            this.$ = new Variable($$[$0-1], $$[$0-2], str_default, _$[$0-2].first_line, _$[$0-2].first_column);
            } else {
            console.log("error sintactico");
            }
        } 
        else if (arreglo=="1D1" && $$[$0]!= "revisar"){
            this.$ = new Vector($$[$0-1],$$[$0-2],$$[$0-2],"LISTA",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
            arreglo="";
        } 
        else if (arreglo=="1D2" && $$[$0]!="revisar"){
            this.$ = new Vector($$[$0-1],$$[$0-2],tipoArreglo,"DEF",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
            arreglo="";
            tipoArreglo="";
        } 
        else if (arreglo=="matriz1" && $$[$0]!="revisar"){
           this.$ = new Vector2D($$[$0-1],$$[$0-2],tipoArreglo,"DEF",$$[$0],datoDos,_$[$0-2].first_line, _$[$0-2].first_column);
           arreglo="";
            tipoArreglo="";
           datoDos=null;
        }
        else if (arreglo=="matriz2" && $$[$0]!="revisar"){
            this.$ = new Vector2D($$[$0-1],$$[$0-2],$$[$0-2],"LISTA",$$[$0],mat2,_$[$0-2].first_line, _$[$0-2].first_column);
            arreglo="";
            tipoArreglo="";
            mat2=null;
        } else if (arreglo=="FUNCION" && $$[$0]!="revisar") {
            this.$ = new Funcion ($$[$0-2],$$[$0-1],par,$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
            arreglo="";
            par ="";
        }else if (arreglo=="listaDeVar" && $$[$0]!="revisar") {
            varias_variables.push($$[$0-1])
            this.$ = new Varias_var(varias_variables, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            arreglo="";
            varias_variables=[];
        }

        else { 
            if (arreglo == null){
        this.$ = new Variable($$[$0-1], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
        arreglo="";}
        }

        
break;
case 24:
 this.$ = $$[$0-1]; arreglo=null;
break;
case 25:
arreglo="listaDeVar"; varias_variables=$$[$0-3]; this.$ = $$[$0-1]; 
break;
case 26:
 this.$ = "revisar"; 
break;
case 29:
par = $$[$0-4] ; arreglo="FUNCION"; this.$ =$$[$0-1];
break;
case 30:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 31: case 44: case 86:
this.$ = []; this.$.push($$[$0]);
break;
case 32:
this.$ = $$[$0-3]; this.$.push($$[$0-1]); this.$.push($$[$0]);
break;
case 33:
this.$ = []; this.$.push($$[$0-1]); this.$.push($$[$0]);
break;
case 34:
 arreglo="matriz1"; tipoArreglo=$$[$0-7]; datoDos=$$[$0-2]; this.$=$$[$0-5]; 
break;
case 35:
arreglo="matriz2"; mat2=$$[$0-3]; this.$ = $$[$0-7]; 
break;
case 36:
arreglo="1D2"; tipoArreglo=$$[$0-4]; this.$=$$[$0-2];
break;
case 37:
 arreglo="1D1";this.$=$$[$0-2];
break;
case 38:
this.$="DOUBLE";
break;
case 39:
this.$="INT";
break;
case 40:
this.$="CHAR";
break;
case 41:
this.$="BOOL";
break;
case 42:
this.$="STD::STRING";
break;
case 43: case 85:
this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 45:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 46:
this.$ = new Not($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 47: case 87:
 this.$ = new Dato($$[$0], TipoDato.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 48: case 88:
 this.$ = new Dato($$[$0], TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 49: case 89:
 this.$ = new Dato($$[$0], TipoDato.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 50: case 90:
 this.$ = new Dato($$[$0], TipoDato.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 51: case 91:
 this.$ = new Dato($$[$0], TipoDato.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 52: case 53: case 54: case 55: case 56: case 57:
this.$ = new Relacionales($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 58: case 59: case 60: case 61: case 62:
this.$ = new Aritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 63: case 64:
this.$ = new Logicos($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 65:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 66: case 67:
this.$ = new IncDec($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 68:
this.$=new Potencia($$[$0-3],$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 70:

        arreglo ="";
        if(totalDos!=null){
            this.$= new id_arreglo($$[$0-1],$$[$0],totalDos, _$[$0-1].first_line, _$[$0-1].first_column);
            totalDos=null;
            arreglo ="";
            accesoDos=null;
        }
        else if(accesoUno=="unaDim" && totalDos==null){
            this.$= new id_arreglo($$[$0-1],$$[$0],null, _$[$0-1].first_line, _$[$0-1].first_column);
            accesoUno="";
            totalDos=null;
            arreglo ="";
            accesoDos=null;
        }
        else{
        this.$ = new id($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    }
    
break;
case 71: case 83:
this.$=$$[$0-1];
break;
case 72:
this.$=new Casteos($$[$0],$$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 73:

        if (accesoDos =="dosDim"){
            this.$=$$[$0-2];
        }else{
            accesoUno="unaDim";
            this.$=$$[$0-2];
            totalDos=null;
        }
    
break;
case 74: case 84:
this.$=null;
break;
case 75:
accesoDos="dosDim"; totalDos=$$[$0-1]; this.$=$$[$0-1];
break;
case 76:
accesoDos=null; this.$=null;
break;
case 77: case 78:
this.$ = new inst_IncDec($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 79:
this.$= new run_funcion($$[$0-2],$$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 80:
this.$= new Mod_vector($$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 81:
this.$=null
break;
case 82:
this.$=$$[$0-2];
break;
case 92:
this.$ = new id($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,20:$V3,22:$V4,27:$V5,32:11,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},{1:[3]},{2:$V0,5:[1,22],6:23,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,20:$V3,22:$V4,27:$V5,32:11,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),{13:[1,24]},{15:[1,25]},{15:[1,26]},{23:[1,27]},{16:[1,28]},{16:[1,31],37:[1,32],72:[1,29],73:[1,30]},{15:[1,33]},o($Vc,[2,38]),o($Vc,[2,39]),o($Vc,[2,40]),o($Vc,[2,41]),o($Vc,[2,42]),{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,10]),{13:[1,37],16:[1,40],33:34,34:[1,35],35:[1,36],37:[1,38],40:[1,39]},{16:[1,41]},{15:$Vd,16:$Ve,24:42,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:53,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{13:[1,54]},{13:[1,55]},{15:$Vd,16:$Ve,17:$Vn,21:56,24:59,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm,79:58},{15:$Vd,16:$Ve,24:60,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{16:[1,61]},o($Vb,[2,23]),{15:$Vd,16:$Ve,24:62,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:[1,64],36:63},o($Vb,[2,26]),{38:[1,65]},{34:[1,66]},{32:68,42:67,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},{17:[1,69]},{13:[1,87],23:[1,88],25:70,51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD},{15:$Vd,16:$Ve,24:89,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:90,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},o($VE,[2,47]),o($VE,[2,48]),o($VE,[2,49]),o($VE,[2,50]),o($VE,[2,51]),{16:[1,91]},{15:$Vd,16:$Ve,24:93,32:94,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm,75:92},o($VE,[2,74],{76:95,37:[1,96]}),{17:[1,97],51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD},o($Vb,[2,77]),o($Vb,[2,78]),o($Vb,[2,79]),{13:[1,98]},{17:[1,99],35:[1,100]},o($VF,[2,86],{51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD}),{38:[1,101],51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD},{15:$Vd,16:$Ve,17:$Vn,21:102,24:59,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm,79:58},{13:[1,103],51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD},{34:[1,104],35:[1,105]},o($VG,[2,31]),{34:[1,106]},{37:[1,109],41:107,43:[1,108]},{17:[1,110],35:[1,111]},{15:[1,112]},{18:[1,113]},o($Vb,[2,13]),{15:$Vd,16:$Ve,24:114,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:115,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:116,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:117,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:118,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:119,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:120,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:121,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:122,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:123,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:124,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:125,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:126,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$Vd,16:$Ve,24:127,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},o($VE,[2,66]),o($VE,[2,67]),o($Vb,[2,14]),{26:[1,128]},o($VE,[2,45]),o($VH,[2,46],{51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy}),{15:$Vd,16:$Ve,24:129,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},o($VE,[2,69]),{17:[1,130],51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD},{17:[1,131]},o($VE,[2,70]),{15:$VI,50:132,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN},{18:[1,139]},o($Vb,[2,81]),{13:[1,140]},{15:$Vd,16:$Ve,24:141,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{34:[2,84],37:[1,143],78:142},o($Vb,[2,12]),o($Vb,[2,24]),{15:$Vd,16:$Ve,24:144,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:[1,145]},{37:[1,148],39:146,43:[1,147]},o($Vb,[2,28]),{32:149,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},{37:[1,150]},{18:[1,151]},{32:152,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},o($VF,[2,33]),{2:$V0,4:153,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,20:$V3,22:$V4,27:$V5,32:11,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},o($VO,[2,52],{51:$Vo,64:$Vv,65:$Vw,66:$Vx,67:$Vy}),o($VO,[2,53],{51:$Vo,64:$Vv,65:$Vw,66:$Vx,67:$Vy}),o($VO,[2,54],{51:$Vo,64:$Vv,65:$Vw,66:$Vx,67:$Vy}),o($VO,[2,55],{51:$Vo,64:$Vv,65:$Vw,66:$Vx,67:$Vy}),o($VO,[2,56],{51:$Vo,64:$Vv,65:$Vw,66:$Vx,67:$Vy}),o($VO,[2,57],{51:$Vo,64:$Vv,65:$Vw,66:$Vx,67:$Vy}),o($VE,[2,58]),o($VE,[2,59]),o($VP,[2,60],{64:$Vv,65:$Vw,67:$Vy}),o($VP,[2,61],{64:$Vv,65:$Vw,67:$Vy}),o($VE,[2,62]),o([13,17,23,35,38,68,70,71,72,73],[2,63],{51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,69:$VA}),o($VH,[2,64],{51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy}),{51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:[1,154],72:$VC,73:$VD},{13:[1,155]},{35:[1,156],51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD},o($VE,[2,71]),{15:$Vd,16:$Ve,24:157,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{38:[1,158]},o($VQ,[2,87]),o($VQ,[2,88]),o($VQ,[2,89]),o($VQ,[2,90]),o($VQ,[2,91]),o($VQ,[2,92]),{2:$V0,4:159,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,20:$V3,22:$V4,27:$V5,32:11,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},o($Vb,[2,82]),o($VF,[2,85],{51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD}),{34:[1,160]},{15:$Vd,16:$Ve,24:161,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{13:[1,162],51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD},o($VG,[2,30]),o($Vb,[2,27]),{32:163,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},{15:$VI,44:164,50:165,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN},{37:[1,166]},{15:$VI,44:167,50:165,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN},{2:$V0,4:168,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,20:$V3,22:$V4,27:$V5,32:11,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},{15:[1,169]},{2:$V0,6:23,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,19:[1,170],20:$V3,22:$V4,27:$V5,32:11,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},{15:$Vd,16:$Ve,24:171,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},o($Vb,[2,15]),{15:$Vd,16:$Ve,24:172,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},o($VE,[2,72]),o($VE,[2,76],{77:173,37:[1,174]}),{2:$V0,6:23,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,19:[1,175],20:$V3,22:$V4,27:$V5,32:11,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},{15:$Vd,16:$Ve,24:176,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{38:[1,177],51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD},o($Vb,[2,25]),{37:[1,178]},{35:$VR,38:[1,179]},o($VQ,[2,44]),{15:$Vd,16:$Ve,24:181,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{35:$VR,38:[1,182]},{2:$V0,6:23,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,19:[1,183],20:$V3,22:$V4,27:$V5,32:11,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},o($VF,[2,32]),o($Vb,[2,11]),o([13,17,23,35,38,70,71,72,73],[2,65],{51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA}),{17:[1,184],51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD},o($VE,[2,73]),{15:$VI,50:185,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN},o($Vb,[2,18],{28:186,29:[1,187]}),{13:[1,188],51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD},{34:[2,83]},{15:$Vd,16:$Ve,24:189,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{13:[1,190]},{15:$VI,50:191,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN},{38:[1,192],51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD},{35:[1,193]},o($Vb,[2,29]),o($VE,[2,68]),{38:[1,194]},o($Vb,[2,16]),{18:[1,197],27:[1,196],30:195},o($Vb,[2,80]),{38:[1,198],51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD},o($Vb,[2,37]),o($VQ,[2,43]),{37:[1,199]},{37:[1,200]},o($VE,[2,75]),o($Vb,[2,17]),{16:[1,201]},{2:$V0,4:202,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,20:$V3,22:$V4,27:$V5,32:11,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},{13:[1,203]},{15:$Vd,16:$Ve,24:204,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{15:$VI,44:205,50:165,53:$VJ,54:$VK,55:$VL,56:$VM,57:$VN},{15:$Vd,16:$Ve,24:206,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,74:$Vm},{2:$V0,6:23,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,19:[1,207],20:$V3,22:$V4,27:$V5,32:11,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},o($Vb,[2,36]),{38:[1,208],51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD},{35:$VR,38:[1,209]},{17:[1,210],51:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,72:$VC,73:$VD},o($Vb,[2,20]),{13:[1,211]},{38:[1,212]},{18:[1,213]},o($Vb,[2,34]),{13:[1,214]},{2:$V0,4:215,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,20:$V3,22:$V4,27:$V5,32:11,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},o($Vb,[2,35]),{2:$V0,6:23,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,19:[1,216],20:$V3,22:$V4,27:$V5,32:11,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},o($Vb,[2,22],{31:217,29:[1,218]}),o($Vb,[2,19]),{18:[1,219]},{2:$V0,4:220,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,20:$V3,22:$V4,27:$V5,32:11,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},{2:$V0,6:23,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,19:[1,221],20:$V3,22:$V4,27:$V5,32:11,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},o($Vb,[2,21])],
defaultActions: {22:[2,1],177:[2,83]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { TipoDato } = require("../interprete/Expresion.js");
    const Dato = require("../interprete/expresion/Dato.js");
        const id = require("../interprete/expresion/id.js");
    const Ternario = require("../interprete/expresion/ternario.js");
    const Logicos = require("../interprete/expresion/Logicos.js");
    const Not = require("../interprete/expresion/Not.js");
    const Negativo = require("../interprete/expresion/Negativo.js");
    const IncDec = require("../interprete/expresion/IncDec.js");
    const Aritmetica = require("../interprete/expresion/Aritmetica.js");
    const Relacionales = require("../interprete/expresion/Relacionales.js");
    const id_arreglo = require("../interprete/expresion/id_arreglo.js");
    const Potencia = require("../interprete/expresion/Potencia.js");
    const Casteos = require("../interprete/expresion/Casteos.js");
    const Mod_vector=require("../interprete/expresion/Mod_vector.js");

    const Print = require("../interprete/instruccion/Print.js");
    const If = require("../interprete/instruccion/If.js");
    const Variable = require("../interprete/instruccion/Variable.js");
const inst_IncDec = require("../interprete/instruccion/inst_IncDec.js");
    const Vector = require("../interprete/instruccion/Vector.js");
   const Vector2D = require("../interprete/instruccion/Vector2D.js");
   const Funcion = require("../interprete/instruccion/Funcion.js");
      const run_funcion = require("../interprete/instruccion/run_funcion.js");
    const Varias_var = require("../interprete/instruccion/Varias_var.js");
    const Metodo = require("../interprete/instruccion/Metodo.js");
    const execute = require("../interprete/instruccion/execute.js");

    const tablaError = require('../interprete/Errores/tablaError.js');
    const error = require('../interprete/Errores/error.js');
    const tablaDeErrores = new tablaError();
    let par =[];
    let arreglo = "";
    let varias_variables = [];

    let tipoArreglo = "";
    let accesoUno = "";
    let accesoDos = "";
    let totalDos = null;
    let datoDos = null;
    let mat2=null;

    //if
    let Ielse_if =[];
    let Ielse=[];
    let cond_ifElse=null;
    let cond_else=null;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* se ignoran */
break;
case 1:/* se ignoran */
break;
case 2:return "COUT";
break;
case 3:return "EXECUTE";
break;
case 4:return "VOID";
break;
case 5:return "endl";
break;
case 6:return "IF";
break;
case 7:return "ELSE";
break;
case 8:return  "CorImp"; 
break;
case 9:return "dosCor";
break;
case 10:return "MASmas";
break;
case 11:return "MENOSmenos";
break;
case 12:return "dosIgual";
break;
case 13:return  "menorIgual"; 
break;
case 14:return  "mayorIgual"; 
break;
case 15:return  "diferente"; 
break;
case 16:return  "And"; 
break;
case 17:return  "oSigno"; 
break;
case 18:return "MAS";
break;
case 19:return "POR";
break;
case 20:return "IGUAL";
break;
case 21:return "DIVIDIR";
break;
case 22:return "MENOS";
break;
case 23:return "potencia";
break;
case 24:return "modulo";
break;
case 25:return "dosPuntos";
break;
case 26:return "new"; 
break;
case 27:return "dobTipo"; 
break;
case 28:return "intTipo"; 
break;
case 29:return "charTipo"; 
break;
case 30:return "boolTipo"; 
break;
case 31:return "stringTipo"; 
break;
case 32:return  "exclamacion"; 
break;
case 33:return "abrirPar"; 
break;
case 34:return  "cerrarPar"; 
break;
case 35:return "abrirLLAVE"; 
break;
case 36:return "cerrarLLAVE"; 
break;
case 37:return  "puntoycoma"; 
break;
case 38:return  "menorQue"; 
break;
case 39:return  "mayorQue"; 
break;
case 40:return  "interrogracion"; 
break;
case 41:return  "coma"; 
break;
case 42:return  "abrirCor"; 
break;
case 43:return  "cerrarCor"; 
break;
case 44:return 56;
break;
case 45:return 57;
break;
case 46:return 55;
break;
case 47: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 54; 
break;
case 48: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 53; 
break;
case 49:return 15;
break;
case 50:/* Espacios se ignoran */
break;
case 51:return 5;
break;
case 52: console.error('Error l√©xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column); 
    tablaDeErrores.agregarError(new error(yy_.yytext, "LEXICO", yy_.yylloc.first_line , yy_.yylloc.first_column));
 
break;
}
},
rules: [/^(?:[\/][\/][^\n]+)/i,/^(?:[[\/][\*][^\*\/]+[\*][\/])/i,/^(?:cout\b)/i,/^(?:execute\b)/i,/^(?:void\b)/i,/^(?:endl\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:<<)/i,/^(?:\[\]\[\])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:=)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?::)/i,/^(?:new\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:std::string\b)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[0-9]+[.][0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:(true|false)\b)/i,/^(?:'[^\']')/i,/^(?:"[^\"]*")/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}