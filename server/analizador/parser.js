/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,12],$V2=[1,10],$V3=[1,11],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[2,5,12,17,21,23,35,36,37,38,39],$Va=[19,23,26],$Vb=[1,42],$Vc=[1,43],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,40],$Vk=[1,41],$Vl=[1,58],$Vm=[1,63],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,64],$Vv=[1,65],$Vw=[1,66],$Vx=[1,67],$Vy=[1,68],$Vz=[1,69],$VA=[1,70],$VB=[11,13,19,27,32,41,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],$VC=[19,32],$VD=[11,19,27,32,57,58,59,60,61,62],$VE=[1,114],$VF=[1,109],$VG=[1,110],$VH=[1,111],$VI=[1,112],$VJ=[1,113],$VK=[11,13,19,27,32,48,49,50,51,52,57,58,59,60,61,62],$VL=[11,13,19,27,32,41,48,49,50,51,52,55,57,58,59,60,61,62],$VM=[27,32],$VN=[1,148];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"listainstr":4,"EOF":5,"instruccion":6,"variable":7,"instrif":8,"exp_InDec":9,"print":10,"puntoycoma":11,"COUT":12,"menorQue":13,"expresion":14,"tipos_print":15,"endl":16,"IF":17,"abrirPar":18,"cerrarPar":19,"abrirLLAVE":20,"cerrarLLAVE":21,"tipos":22,"PALABRA_I":23,"t_declaracion":24,"IGUAL":25,"abrirCor":26,"cerrarCor":27,"arreglo":28,"dosCor":29,"doble_arreglo":30,"lista_int":31,"coma":32,"new":33,"LISTA_ELEMENTOS":34,"dobTipo":35,"intTipo":36,"charTipo":37,"boolTipo":38,"stringTipo":39,"DATOS":40,"MENOS":41,"exclamacion":42,"CADENA":43,"CHAR":44,"BOOLEAN":45,"DOUBLE":46,"INT":47,"mayorIgual":48,"mayorQue":49,"menorIgual":50,"diferente":51,"dosIgual":52,"modulo":53,"DIVIDIR":54,"MAS":55,"POR":56,"oSigno":57,"And":58,"interrogracion":59,"dosPuntos":60,"MASmas":61,"MENOSmenos":62,"potencia":63,"parentesis_exp":64,"palabras":65,"amb_palabras":66,"lista_par":67,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"puntoycoma",12:"COUT",13:"menorQue",16:"endl",17:"IF",18:"abrirPar",19:"cerrarPar",20:"abrirLLAVE",21:"cerrarLLAVE",23:"PALABRA_I",25:"IGUAL",26:"abrirCor",27:"cerrarCor",29:"dosCor",32:"coma",33:"new",35:"dobTipo",36:"intTipo",37:"charTipo",38:"boolTipo",39:"stringTipo",41:"MENOS",42:"exclamacion",43:"CADENA",44:"CHAR",45:"BOOLEAN",46:"DOUBLE",47:"INT",48:"mayorIgual",49:"mayorQue",50:"menorIgual",51:"diferente",52:"dosIgual",53:"modulo",54:"DIVIDIR",55:"MAS",56:"POR",57:"oSigno",58:"And",59:"interrogracion",60:"dosPuntos",61:"MASmas",62:"MENOSmenos",63:"potencia"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,2],[10,5],[15,4],[15,1],[8,7],[7,3],[24,3],[24,1],[24,4],[24,3],[24,6],[31,4],[31,2],[30,9],[30,10],[28,6],[28,4],[22,1],[22,1],[22,1],[22,1],[22,1],[34,3],[34,1],[14,2],[14,2],[14,1],[14,1],[14,1],[14,1],[14,1],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,5],[14,2],[14,2],[14,6],[14,2],[14,2],[64,2],[64,3],[65,4],[65,0],[66,3],[66,0],[9,3],[9,3],[9,5],[67,3],[67,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; tablaDeErrores.imprimirTablaE(); return this.$;  
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$ = []; this.$.push($$[$0]); 
break;
case 4: case 5: case 6:
this.$ = $$[$0];
break;
case 7: case 16: case 17:
 this.$ = $$[$0]; 
break;
case 8:
this.$ = new Dato($$[$0-1], "ERROR", this._$.first_line  , this._$.first_column); tablaDeErrores.agregarError(new error($$[$0-1], "SINTACTICO", this._$.first_line  , this._$.first_column)); console.error('Error sint√°ctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
break;
case 9:
 this.$ = new Print($$[$0-1],$$[$0]); 
break;
case 10:
 this.$ = "salto"; 
break;
case 11:
 this.$ = null; 
break;
case 12:
this.$ = new If($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 13:
  
        if ($$[$0] === "revisar") {
        if ($$[$0-2] === "DOUBLE") {
        dob_default = new Dato(0.0, TipoDato.DOUBLE, _$[$0-2].first_line, _$[$0-2].first_column);
        this.$ = new Variable($$[$0-1], $$[$0-2], dob_default, _$[$0-2].first_line, _$[$0-2].first_column);
        } else if ($$[$0-2] === "INT") {
        int_default = new Dato(0, TipoDato.INT, _$[$0-2].first_line, _$[$0-2].first_column);
        this.$ = new Variable($$[$0-1], $$[$0-2], int_default, _$[$0-2].first_line, _$[$0-2].first_column);
        } else if ($$[$0-2] === "CHAR") {
        char_default = new Dato('0', TipoDato.CHAR, _$[$0-2].first_line, _$[$0-2].first_column);    
        this.$ = new Variable($$[$0-1], $$[$0-2], char_default, _$[$0-2].first_line, _$[$0-2].first_column);
        } else if ($$[$0-2] === "BOOL") {
        bool_default = new Dato("true", TipoDato.BOOLEAN, _$[$0-2].first_line, _$[$0-2].first_column);      
        this.$ = new Variable($$[$0-1], $$[$0-2], bool_default, _$[$0-2].first_line, _$[$0-2].first_column);
        } else if ($$[$0-2] === "STD::STRING") {
        str_default = new Dato(" ", TipoDato.CADENA, _$[$0-2].first_line, _$[$0-2].first_column);          
        this.$ = new Variable($$[$0-1], $$[$0-2], str_default, _$[$0-2].first_line, _$[$0-2].first_column);
        } else {
        console.log("error sintactico");
        }
        } 
        else if (arreglo=="1D1"){
            this.$ = new Vector($$[$0-1],$$[$0-2],$$[$0-2],"LISTA",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
            arreglo=="";
        } 
        else if (arreglo=="1D2"){
            this.$ = new Vector($$[$0-1],$$[$0-2],tipoArreglo,"DEF",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
            arreglo=="";
            tipoArreglo="";
        } 
        else if (arreglo=="matriz1"){
           this.$ = new Vector2D($$[$0-1],$$[$0-2],tipoArreglo,"DEF",$$[$0],datoDos,_$[$0-2].first_line, _$[$0-2].first_column);
           arreglo=="";
            tipoArreglo="";
           datoDos=null;
        }
        else if (arreglo=="matriz2"){
            this.$ = new Vector2D($$[$0-1],$$[$0-2],$$[$0-2],"LISTA",$$[$0],mat2,_$[$0-2].first_line, _$[$0-2].first_column);
            arreglo=="";
            tipoArreglo="";
            mat2=null;
        } else if (arreglo=="FUNCION") {
            this.$ = new Funcion ($$[$0-2],$$[$0-1],par,$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
            arreglo="";
            par ="";
        }
        else { 
        this.$ = new Variable($$[$0-1], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
        }

        
break;
case 14:
 this.$ = $$[$0-1]; 
break;
case 15:
 this.$ = "revisar"; 
break;
case 18:
par = $$[$0-4] ; arreglo="FUNCION"; this.$ =$$[$0-1];
break;
case 19:
this.$ = $$[$0-3]; this.$.push($$[$0-1]); this.$.push($$[$0]);
break;
case 20:
this.$ = []; this.$.push($$[$0-1]); this.$.push($$[$0]);
break;
case 21:
 arreglo="matriz1"; tipoArreglo=$$[$0-7]; datoDos=$$[$0-2]; this.$=$$[$0-5]; 
break;
case 22:
arreglo="matriz2"; mat2=$$[$0-3]; this.$ = $$[$0-7]; 
break;
case 23:
arreglo="1D2"; tipoArreglo=$$[$0-4]; this.$=$$[$0-2];
break;
case 24:
 arreglo="1D1";this.$=$$[$0-2];
break;
case 25:
this.$="DOUBLE";
break;
case 26:
this.$="INT";
break;
case 27:
this.$="CHAR";
break;
case 28:
this.$="BOOL";
break;
case 29:
this.$="STD::STRING";
break;
case 30: case 67:
this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 31: case 68:
this.$ = []; this.$.push($$[$0]);
break;
case 32:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 33:
this.$ = new Not($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 34: case 69:
 this.$ = new Dato($$[$0], TipoDato.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 35: case 70:
 this.$ = new Dato($$[$0], TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 36: case 71:
 this.$ = new Dato($$[$0], TipoDato.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 37: case 72:
 this.$ = new Dato($$[$0], TipoDato.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 38: case 73:
 this.$ = new Dato($$[$0], TipoDato.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 39: case 40: case 41: case 42: case 43: case 44:
this.$ = new Relacionales($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 45: case 46: case 47: case 48: case 49:
this.$ = new Aritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 50: case 51:
this.$ = new Logicos($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 52:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 53: case 54:
this.$ = new IncDec($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 55:
this.$=new Potencia($$[$0-3],$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 56:
this.$=$$[$0];
break;
case 57:

        arreglo ="";
        if(totalDos!=null){
            this.$= new id_arreglo($$[$0-1],$$[$0],totalDos, _$[$0-1].first_line, _$[$0-1].first_column);
            totalDos=null;
        }
        else if(accesoUno=="unaDim" && totalDos==null){
            this.$= new id_arreglo($$[$0-1],$$[$0],null, _$[$0-1].first_line, _$[$0-1].first_column);
            accesoUno="";
        }
        else{
        this.$ = new id($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    }
    
break;
case 58:
this.$=$$[$0-1];
break;
case 59:
this.$=new Casteos($$[$0],$$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 60:

        if (accesoDos =="dosDim"){
            //totalDos=$$[$0];
            this.$=$$[$0-2];
        }else{
            accesoUno="unaDim";
            this.$=$$[$0-2];
            totalDos=null;
        }
    
break;
case 61: case 63:
this.$=null;
break;
case 62:
accesoDos="dosDim";totalDos=$$[$0-1];this.$=$$[$0-1];
break;
case 64: case 65:
this.$ = new inst_IncDec($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 66:
this.$= new run_funcion($$[$0-4],$$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 74:
this.$ = new id($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,12:$V1,17:$V2,22:9,23:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8},{1:[3]},{2:$V0,5:[1,18],6:19,7:4,8:5,9:6,10:7,12:$V1,17:$V2,22:9,23:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),{11:[1,20]},{23:[1,21]},{18:[1,22]},{18:[1,25],61:[1,23],62:[1,24]},{13:[1,26]},o($Va,[2,25]),o($Va,[2,26]),o($Va,[2,27]),o($Va,[2,28]),o($Va,[2,29]),{1:[2,1]},o($V9,[2,2]),o($V9,[2,8]),{11:[1,29],18:[1,32],24:27,25:[1,28],26:[1,30],29:[1,31]},{14:33,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{11:[1,44]},{11:[1,45]},{14:47,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk,67:46},{13:[1,48]},o($V9,[2,13]),{14:49,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},o($V9,[2,15]),{27:[1,50]},{25:[1,51]},{22:53,31:52,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8},{13:$Vl,19:[1,54],41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA},{14:71,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:72,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},o($VB,[2,34]),o($VB,[2,35]),o($VB,[2,36]),o($VB,[2,37]),o($VB,[2,38]),{18:[1,73]},{14:75,18:$Vb,22:76,23:$Vc,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk,64:74},o($VB,[2,61],{65:77,26:[1,78]}),o($V9,[2,64]),o($V9,[2,65]),{19:[1,79],32:[1,80]},o($VC,[2,68],{13:$Vl,41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA}),{14:81,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{11:[1,82],13:$Vl,41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA},{25:[1,83]},{26:[1,86],30:84,33:[1,85]},{19:[1,87],32:[1,88]},{23:[1,89]},{20:[1,90]},{14:91,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:92,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:93,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:94,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:95,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:96,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:97,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:98,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:99,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:100,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:101,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:102,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:103,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:104,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},o($VB,[2,53]),o($VB,[2,54]),o($VB,[2,32]),o($VD,[2,33],{13:$Vl,41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv}),{14:105,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},o($VB,[2,56]),{13:$Vl,19:[1,106],41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA},{19:[1,107]},o($VB,[2,57]),{23:$VE,40:108,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ},{11:[1,115]},{14:116,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{11:[1,119],13:[1,118],15:117,41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA},o($V9,[2,14]),{26:[1,122],28:120,33:[1,121]},o($V9,[2,17]),{22:123,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8},{26:[1,124]},{20:[1,125]},{22:126,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8},o($VC,[2,20]),{2:$V0,4:127,6:3,7:4,8:5,9:6,10:7,12:$V1,17:$V2,22:9,23:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8},o($VK,[2,39],{41:$Vm,53:$Vs,54:$Vt,55:$Vu,56:$Vv}),o($VK,[2,40],{41:$Vm,53:$Vs,54:$Vt,55:$Vu,56:$Vv}),o($VK,[2,41],{41:$Vm,53:$Vs,54:$Vt,55:$Vu,56:$Vv}),o($VK,[2,42],{41:$Vm,53:$Vs,54:$Vt,55:$Vu,56:$Vv}),o($VK,[2,43],{41:$Vm,53:$Vs,54:$Vt,55:$Vu,56:$Vv}),o($VK,[2,44],{41:$Vm,53:$Vs,54:$Vt,55:$Vu,56:$Vv}),o($VB,[2,45]),o($VB,[2,46]),o($VL,[2,47],{53:$Vs,54:$Vt,56:$Vv}),o($VL,[2,48],{53:$Vs,54:$Vt,56:$Vv}),o($VB,[2,49]),o([11,19,27,32,57,59,60,61,62],[2,50],{13:$Vl,41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,58:$Vx}),o($VD,[2,51],{13:$Vl,41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv}),{13:$Vl,41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:[1,128],61:$Vz,62:$VA},{13:$Vl,32:[1,129],41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA},o($VB,[2,58]),{14:130,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{27:[1,131]},o($VM,[2,69]),o($VM,[2,70]),o($VM,[2,71]),o($VM,[2,72]),o($VM,[2,73]),o($VM,[2,74]),o($V9,[2,66]),o($VC,[2,67],{13:$Vl,41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA}),o($V9,[2,9]),{13:[1,132],14:94,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},o($V9,[2,11]),o($V9,[2,16]),{22:133,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8},{23:$VE,34:134,40:135,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ},{26:[1,136]},{23:$VE,34:137,40:135,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ},{2:$V0,4:138,6:3,7:4,8:5,9:6,10:7,12:$V1,17:$V2,22:9,23:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8},{23:[1,139]},{2:$V0,6:19,7:4,8:5,9:6,10:7,12:$V1,17:$V2,21:[1,140],22:9,23:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8},{14:141,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{14:142,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},o($VB,[2,59]),o($VB,[2,63],{66:143,26:[1,144]}),{16:[1,145]},{26:[1,146]},{27:[1,147],32:$VN},o($VM,[2,31]),{14:149,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{27:[1,150],32:$VN},{2:$V0,6:19,7:4,8:5,9:6,10:7,12:$V1,17:$V2,21:[1,151],22:9,23:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8},o($VC,[2,19]),o($V9,[2,12]),o([11,19,27,32,59,60,61,62],[2,52],{13:$Vl,41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx}),{13:$Vl,19:[1,152],41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA},o($VB,[2,60]),{23:$VE,40:153,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ},{11:[1,154]},{14:155,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{11:[1,156]},{23:$VE,40:157,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ},{13:$Vl,27:[1,158],41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA},{32:[1,159]},o($V9,[2,18]),o($VB,[2,55]),{27:[1,160]},o($V9,[2,10]),{13:$Vl,27:[1,161],41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA},o($V9,[2,24]),o($VM,[2,30]),{26:[1,162]},{26:[1,163]},o($VB,[2,62]),{11:[1,164]},{14:165,18:$Vb,23:$Vc,41:$Vd,42:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,47:$Vj,63:$Vk},{23:$VE,34:166,40:135,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ},o($V9,[2,23]),{13:$Vl,27:[1,167],41:$Vm,48:$Vn,49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA},{27:[1,168],32:$VN},{11:[1,169]},{27:[1,170]},o($V9,[2,21]),{11:[1,171]},o($V9,[2,22])],
defaultActions: {18:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { TipoDato } = require("../interprete/Expresion.js");
    const Dato = require("../interprete/expresion/Dato.js");
        const id = require("../interprete/expresion/id.js");
    const Ternario = require("../interprete/expresion/ternario.js");
    const Logicos = require("../interprete/expresion/Logicos.js");
    const Not = require("../interprete/expresion/Not.js");
    const Negativo = require("../interprete/expresion/Negativo.js");
    const IncDec = require("../interprete/expresion/IncDec.js");
    const Aritmetica = require("../interprete/expresion/Aritmetica.js");
    const Relacionales = require("../interprete/expresion/Relacionales.js");
    const id_arreglo = require("../interprete/expresion/id_arreglo.js");
    const Potencia = require("../interprete/expresion/Potencia.js");
    const Casteos = require("../interprete/expresion/Casteos.js");

    const Print = require("../interprete/instruccion/Print.js");
    const If = require("../interprete/instruccion/If.js");
    const Variable = require("../interprete/instruccion/Variable.js");
const inst_IncDec = require("../interprete/instruccion/inst_IncDec.js");
    const Vector = require("../interprete/instruccion/Vector.js");
   const Vector2D = require("../interprete/instruccion/Vector2D.js");
   const Funcion = require("../interprete/instruccion/Funcion.js");
      const run_funcion = require("../interprete/instruccion/run_funcion.js");


    const tablaError = require('../interprete/Errores/tablaError.js');
    const error = require('../interprete/Errores/error.js');
    const tablaDeErrores = new tablaError();
    let par =[];
    let arreglo = "";

    let tipoArreglo = "";
    let accesoUno = "";
    let accesoDos = "";
    let totalDos = null;
    let datoDos = null;
    let mat2=null;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "COUT";
break;
case 1:return "endl";
break;
case 2:return "IF";
break;
case 3:return "dosCor";
break;
case 4:return "MASmas";
break;
case 5:return "MENOSmenos";
break;
case 6:return "dosIgual";
break;
case 7:return  "menorIgual"; 
break;
case 8:return  "mayorIgual"; 
break;
case 9:return  "diferente"; 
break;
case 10:return  "And"; 
break;
case 11:return  "oSigno"; 
break;
case 12:return "MAS";
break;
case 13:return "POR";
break;
case 14:return "IGUAL";
break;
case 15:return "DIVIDIR";
break;
case 16:return "MENOS";
break;
case 17:return "potencia";
break;
case 18:return "modulo";
break;
case 19:return "dosPuntos";
break;
case 20:return "new"; 
break;
case 21:return "dobTipo"; 
break;
case 22:return "intTipo"; 
break;
case 23:return "charTipo"; 
break;
case 24:return "boolTipo"; 
break;
case 25:return "stringTipo"; 
break;
case 26:return "abrirPar"; 
break;
case 27:return  "cerrarPar"; 
break;
case 28:return "abrirLLAVE"; 
break;
case 29:return "cerrarLLAVE"; 
break;
case 30:return  "puntoycoma"; 
break;
case 31:return  "menorQue"; 
break;
case 32:return  "mayorQue"; 
break;
case 33:return  "exclamacion"; 
break;
case 34:return  "interrogracion"; 
break;
case 35:return  "coma"; 
break;
case 36:return  "abrirCor"; 
break;
case 37:return  "cerrarCor"; 
break;
case 38:return 46;
break;
case 39:return 47;
break;
case 40:return 45;
break;
case 41: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 44; 
break;
case 42: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 43; 
break;
case 43:return 23;
break;
case 44:/* Espacios se ignoran */
break;
case 45:return 5;
break;
case 46: console.error('Error l√©xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column); 
    tablaDeErrores.agregarError(new error(yy_.yytext, "LEXICO", yy_.yylloc.first_line , yy_.yylloc.first_column));
 
break;
}
},
rules: [/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:if\b)/i,/^(?:\[\]\[\])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:=)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?::)/i,/^(?:new\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:std::string\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[0-9]+[.][0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:(true|false)\b)/i,/^(?:'[^\']')/i,/^(?:"[^\"]*")/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}